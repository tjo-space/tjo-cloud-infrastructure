log syslog all;
debug protocols all;

{{ $nodeName := getenv "NODE" }}
{{ $node := index (ds "config").nodes $nodeName }}

router id {{ (net.ParsePrefix $node.lan.ipv4.address).Addr }};

protocol device {
  scan time 10;
}

protocol kernel {
  scan time 10;
  learn;
  persist;

  ipv4 {
    import all;
    export all;
  };
}

protocol kernel {
  scan time 10;
  learn;
  persist;

  ipv6 {
    import all;
    export all;
  };
}

# Only keep routes that have source BGP.
filter accept_bgp_routes_only {
  if source = RTS_BGP then accept;
  reject;
}

##
# INTERNAL BGP
##
protocol bgp lan {
  description "BGP for LAN";
  dynamic name "lan_dynbgp";

  local {{ (net.ParsePrefix $node.lan.ipv6.address).Addr }} port 179 as 65000;
  neighbor range fd74:6a6f::/32 internal;

  direct;
  passive;
  graceful restart on;

  ipv4 {
    extended next hop yes;
    import all;
  };

  ipv6 {
    import all;
  };
}

{{ if $node.primary }}
protocol bgp lan_vip {
  description "BGP for LAN VIP";
  dynamic name "lan_vip_dynbgp";

  local fd74:6a6f::1 port 179 as 65000;
  neighbor range fd74:6a6f::/32 internal;

  direct;
  passive;
  graceful restart on;

  ipv4 {
    extended next hop on;
    import all;
  };

  ipv6 {
    import all;
  };
}
{{ end }}

##
# network.tjo.cloud nodes
##
template bgp node_template {
  local as 65000;

  graceful restart on;
  rr client;

  ipv4 {
    extended next hop on;
    import all;
    export filter accept_bgp_routes_only;
  };

  ipv6 {
    import all;
    export filter accept_bgp_routes_only;
  };
}

{{- range $key, $value := (ds "config").nodes }}
{{ if ne $key $nodeName }}
protocol bgp uplink_{{ $key }} from node_template {
  description "BGP uplink to {{ $key }}";
  neighbor {{ (net.ParsePrefix $value.lan.ipv6.address).Addr }} internal;
}
{{ end }}
{{- end }}

##
# IPv6 SLAAC and RADV
##
{{ if $node.primary }}
protocol radv {
  # TODO: Should we export BGP routes here?
  ipv6 {};

  interface "br-lan", "jool" {
    managed yes;
    other config yes;
    prefix {{ $node.wan.ipv6.prefix }};
    prefix fd74:6a6f::/48;
  };

  # Do not advertise any other prefixes except those
  # We strictly defined ourself.
  prefix ::/0 {
    skip yes;
  };

  rdnss {
    ns fd74:6a6f::1;
  };

  # PREF64
  # Advertising NAT64 to clients.
  # Ref: https://datatracker.ietf.org/doc/html/rfc8781
  custom option type 38 value hex:0e:10:00:64:ff:9b:00:00:00:00:00:00:00:00;
}
{{ end }}
