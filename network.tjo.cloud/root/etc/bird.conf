log syslog all;

{{ $nodeName := getenv "NODE" }}
{{ $node := index (ds "config").nodes $nodeName }}

router id {{ (net.ParsePrefix $node.lan.ipv4.address).Addr }};

protocol device {
  scan time 10;
}

protocol kernel {
  scan time 10;
  learn;
  persist;

  ipv4 {
    import all;
    export all;
  };
}

protocol kernel {
  scan time 10;
  learn;
  persist;

  ipv6 {
    import all;
    export all;
  };
}

# Only keep routes that have source BGP.
filter accept_bgp_routes_only {
  if source = RTS_BGP then accept;
  reject;
}

##
# INTERNAL BGP
##
protocol bgp lan {
  description "BGP for LAN";
  dynamic name "lan_dynbgp";

  local {{ (net.ParsePrefix $node.lan.ipv4.address).Addr }} port 179 as 65000;
  neighbor range 10.0.0.0/10 internal;

  direct;
  passive;
  graceful restart on;

  ipv4 {
    import all;
  };

  ipv6 {
    import all;
  };
}

{{ if $node.primary }}
protocol bgp lan_vip {
  description "BGP for LAN VIP IP";
  dynamic name "lan_vip_dynbgp";

  local 10.0.0.1 port 179 as 65000;
  neighbor range 10.0.0.0/10 internal;

  direct;
  passive;
  graceful restart on;

  ipv4 {
    import all;
  };

  ipv6 {
    import all;
  };
}
{{ end }}

##
# network.tjo.cloud nodes
##
template bgp node_template {
  local as 65000;

  graceful restart on;
  rr client;

  ipv4 {
    import all;
    export filter accept_bgp_routes_only;
  };

  ipv6 {
    import all;
    export filter accept_bgp_routes_only;
  };
}

{{- range $key, $value := (ds "config").nodes }}
{{ if ne $key $nodeName }}
protocol bgp uplink_{{ $key }} from node_template {
  description "BGP uplink to {{ $key }}";
  neighbor {{ (net.ParsePrefix $value.lan.ipv4.address).Addr }} internal;
}
{{ end }}
{{- end }}
