#!/usr/bin/env bash
# vim: set filetype=sh
set -euo pipefail

api_host="https://api.dnsimple.com/v2"
sleep_interval=${SLEEP_INTERVAL:-300}
record_ttl=${RECORD_TTL:-600}

# Only services with ipv6 supported are listed here.
# And are not using cloudflare or similar services
# that may block requests from this script.
services=(
  "ifconfig.io"
)

info() {
  echo "INFO: $1"
}

warn() {
  echo "WARN: $1"
}

error() {
  warn "$1"
  exit 1
}

test -z "${DNSIMPLE_TOKEN}" && error "DNSIMPLE_TOKEN not set!"
test -z "${DNSIMPLE_ACCOUNT_ID}" && error "DNSIMPLE_ACCOUNT_ID not set!"
test -z "${DOMAIN}" && error "DOMAIN not set!"
test -z "${CLOUD_REGION}" && error "CLOUD_REGION not set!"

dns_list="$api_host/$DNSIMPLE_ACCOUNT_ID/zones/$DOMAIN/records"

configure_single() {
  # disable glob expansion
  set -f

  domain_records=$1
  domain=$2
  ip=$3
  type=$4

  record_id=$(echo "$domain_records" | jq ".data[] | select(.type == \"$type\" and .name == \"$domain\") | .id")
  record_data=$(echo "$domain_records" | jq -r ".data[] | select(.type == \"$type\" and .name == \"$domain\") | .content")

  if [ "$(echo "$record_id" | wc -l)" -ge 2 ]; then
    warn "domain=$domain type=$type Domain name has duplicate DNS records, removing duplicates"
    record_id_to_delete=$(echo "$record_id" | tail -n +2)
    record_id=$(echo "$record_id" | head -1)
    record_data=$(echo "$record_data" | head -1)

    while IFS= read -r line; do
      curl -s -X DELETE \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DNSIMPLE_TOKEN" \
        "$dns_list/$line" &>/dev/null
    done <<<"$record_id_to_delete"
  fi

  # re-enable glob expansion
  set +f

  data="{\"type\": \"$type\", \"name\": \"$domain\", \"content\": \"$ip\", \"ttl\": $record_ttl}"
  url="$dns_list/$record_id"

  if [[ -z $record_id ]]; then
    info "domain=$domain type=$type No record found. Creating record, sending data=$data to url=$url"

    new_record=$(curl -s -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $DNSIMPLE_TOKEN" \
      -d "$data" \
      "$url")

    record_data=$(echo "$new_record" | jq -r ".data")
  fi

  if [[ "$ip" != "$record_data" ]]; then
    info "domain=$domain type=$type Existing DNS record address ($record_data) doesn't match current IP ($ip), sending data=$data to url=$url"

    curl -s -X PATCH \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $DNSIMPLE_TOKEN" \
      -d "$data" \
      "$url" &>/dev/null
  else
    info "domain=$domain type=$type Existing DNS record address ($record_data) did not need updating"
  fi
}

configure_many() {
  # disable glob expansion
  set -f

  domain_records=$1
  domain=$2
  ip=$3
  type=$4

  record_id=$(echo "$domain_records" | jq ".data[] | select(.type == \"$type\" and .name == \"$domain\" and .content = \"$ip\") | .id")
  record_data=$(echo "$domain_records" | jq ".data[] | select(.type == \"$type\" and .name == \"$domain\" and .content = \"$ip\") | .content")

  # re-enable glob expansion
  set +f

  data="{\"type\": \"$type\", \"name\": \"$domain\", \"content\": \"$ip\", \"ttl\": $record_ttl}"
  url="$dns_list/$record_id"

  if [[ -z $record_id ]]; then
    info "domain=$domain type=$type No record found. Creating record, sending data=$data to url=$url"

    new_record=$(curl -s -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $DNSIMPLE_TOKEN" \
      -d "$data" \
      "$url")

    record_data=$(echo "$new_record" | jq -r ".data")
  else
    info "domain=$domain type=$type Existing DNS record address ($record_data) did not need updating"
  fi
}

while (true); do
  domain_records=$(curl -s -X GET \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DNSIMPLE_TOKEN" \
    "$dns_list")

  for service in "${services[@]}"; do
    info "Trying with $service..."

    ipv4="$(curl -4 -s -f --connect-timeout 2 "$service" || echo "")"
    ipv6="$(curl -6 -s -f --connect-timeout 2 "$service" || echo "")"

    if [[ -n "$ipv4$ipv6" ]]; then
      break
    else
      warn "Failed to retrieve IP from $service"
    fi
  done

  if [[ -z $ipv4 ]]; then
    warn "IPv4 wasn't retrieved within allowed interval. Will try $sleep_interval seconds later.."
  else
    info "Found IPv4 address $ipv4"
    configure_single "$domain_records" "$CLOUD_REGION" "$ipv4" "A"
    configure_many   "$domain_records" "any"           "$ipv4" "A"
  fi

  if [[ -z $ipv6 ]]; then
    warn "IPv6 wasn't retrieved within allowed interval. Will try $sleep_interval seconds later.."
  else
    info "Found IPv6 address $ipv6"
    configure_single "$domain_records" "$CLOUD_REGION" "$ipv6" "AAAA"
    configure_many   "$domain_records" "any"           "$ipv6" "AAAA"
  fi

  sleep "$sleep_interval"
done
